{"version":3,"sources":["GlobalStyle.js","common/Container/styled.js","common/Container/index.js","common/Header/index.js","common/Section/styled.js","common/Section/index.js","features/author/AuthorPage.js","features/tasks/Input/index.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/TasksPage/Form/styled.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/TaskList/styled.js","features/tasks/TasksPage/searchQueryParamName.js","routes.js","features/tasks/TasksPage/TaskList/index.js","features/tasks/TasksPage/Buttons/styled.js","features/tasks/TasksPage/Buttons/index.js","features/tasks/TasksPage/Button/index.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/queryParameters.js","features/tasks/TasksPage/index.js","features/tasks/TaskPage/index.js","Navigation/styled.js","Navigation/index.js","App.js","reportWebVitals.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","index.js"],"names":["GlobalStyle","createGlobalStyle","StyledContainer","styled","main","Container","children","Header","title","Wrapper","section","header","Heading","h2","special","css","Body","div","Section","body","extraHeaderContent","href","target","input","localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","loading","reducers","addTask","task","payload","push","toggleHideDone","state","toggleTaskDone","taskId","index","findIndex","id","done","removeTask","splice","setAllDone","fetchExampleTasks","fetchExampleTasksSuccess","fetchExampleTasksError","actions","selectTasksState","selectTasks","selectHideDone","selectLoading","selectAreTasksEmpty","length","selectIsEveryTaskDone","every","StyledForm","form","Button","button","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trim","content","nanoid","current","focus","Input","value","onChange","placeholder","required","ref","StyledNavLink","NavLink","List","ul","Item","li","hidden","Content","span","toggleDone","remove","toTask","TaskList","location","useLocation","query","URLSearchParams","search","get","searchQueryParamName","useSelector","filter","toUpperCase","includes","selectTasksByQuery","map","onClick","to","disabled","Buttons","areTasksEmpty","isEveryTaskDone","DownloadButton","key","useQueryParameter","replaceQueryParameter","history","useHistory","searchParams","undefined","delete","set","newSearch","toString","pathname","useReplaceQueryParameter","TasksPage","Search","TaskPage","useParams","find","getTaskById","Navigation","path","AuthorPage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","delay","call","exampleTasks","put","alert","select","takeLatest","type","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"wOAEaA,EAAcC,YAAH,yO,eCAXC,EAAkBC,IAAOC,KAAV,4F,OCIbC,EAJG,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OACd,cAACJ,EAAD,UAAkBI,KCGPC,EANA,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAF,OACX,iCACI,6BAAKA,OCAAC,EAAUN,IAAOO,QAAV,6GAMPH,EAASJ,IAAOQ,OAAV,iOAWNC,EAAUT,IAAOU,GAAV,iGAKd,qBAAGC,SAAyBC,YAAJ,2EAKjBC,EAAOb,IAAOc,IAAV,gDCjBFC,EAVC,SAAC,GAAD,IAAGV,EAAH,EAAGA,MAAOW,EAAV,EAAUA,KAAMC,EAAhB,EAAgBA,mBAAhB,OACZ,eAACX,EAAD,WACI,eAAC,EAAD,WACI,cAACG,EAAD,UAAUJ,IACTY,KAEL,cAACJ,EAAD,UAAOG,QCHA,oBACX,eAAC,EAAD,WACI,cAAC,EAAD,CAAQX,MAAM,cACd,cAAC,EAAD,CACIA,MAAM,mBACNW,KACI,yHAA4D,mBAAGE,KAAK,+CAA+CC,OAAO,SAA9D,+B,gBCT7DnB,MAAOoB,MAAtB,qE,QCFMC,EAAkB,QAEXC,EAA0B,SAAAC,GAAK,OACxCC,aAAaC,QAAQJ,EAAiBK,KAAKC,UAAUJ,KCAnDK,EAAaC,YAAY,CAC3BC,KAAM,QACNC,aAAc,CACVR,MDAJG,KAAKM,MAAMR,aAAaS,QAAQZ,KAAqB,GCCjDa,UAAU,EACVC,SAAS,GAEbC,SAAU,CACNC,QAAS,cAAmC,IAAhCd,EAA+B,EAA/BA,MAAoBe,EAAW,EAApBC,QACnBhB,EAAMiB,KAAKF,IAEfG,eAAgB,SAAAC,GACZA,EAAMR,UAAYQ,EAAMR,UAE5BS,eAAgB,cAAqC,IAAlCpB,EAAiC,EAAjCA,MAAoBqB,EAAa,EAAtBL,QACpBM,EAAQtB,EAAMuB,WAAU,qBAAGC,KAAgBH,KACjDrB,EAAMsB,GAAOG,MAAQzB,EAAMsB,GAAOG,MAEtCC,WAAY,cAAqC,IAAlC1B,EAAiC,EAAjCA,MAAoBqB,EAAa,EAAtBL,QAChBM,EAAQtB,EAAMuB,WAAU,qBAAGC,KAAgBH,KACjDrB,EAAM2B,OAAOL,EAAO,IAExBM,WAAY,YAAgB,IAAD,EAAZ5B,EAAY,EAAZA,MAAY,cACJA,GADI,IACvB,2BAA0B,SACjByB,MAAO,GAFO,gCAK3BI,kBAAmB,SAAAV,GACfA,EAAMP,SAAU,GAEpBkB,yBAA0B,SAACX,EAAD,GAAgC,IAAbnB,EAAY,EAArBgB,QAChCG,EAAMnB,MAAQA,EACdmB,EAAMP,SAAU,GAEpBmB,uBAAwB,SAACZ,GACrBA,EAAMP,SAAU,MAKrB,EASHP,EAAW2B,QARXlB,GADG,EACHA,QACAI,GAFG,EAEHA,eACAE,GAHG,EAGHA,eACAM,GAJG,EAIHA,WACAE,GALG,EAKHA,WACAC,GANG,EAMHA,kBACAC,GAPG,EAOHA,yBACAC,GARG,EAQHA,uBAGEE,GAAmB,SAAAd,GAAK,OAAIA,EAAMnB,OAE3BkC,GAAc,SAAAf,GAAK,OAAIc,GAAiBd,GAAOnB,OAC/CmC,GAAiB,SAAAhB,GAAK,OAAIc,GAAiBd,GAAOR,UAClDyB,GAAgB,SAAAjB,GAAK,OAAIc,GAAiBd,GAAOP,SACjDyB,GAAsB,SAAAlB,GAAK,OAAkC,IAA9Be,GAAYf,GAAOmB,QAClDC,GAAwB,SAAApB,GAAK,OAAIe,GAAYf,GAAOqB,OAAM,qBAAGf,SAc3DpB,KAAf,QCxEaoC,GAAahE,IAAOiE,KAAV,wLAUVC,GAASlE,IAAOmE,OAAV,wRCkCJC,GAvCF,WACT,MAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACMC,EAAWC,iBAAO,MAElBC,EAAWC,cAqBjB,OACI,eAACX,GAAD,CAAYY,SApBK,SAACC,GAClBA,EAAMC,iBAEwBR,EAAeS,SAM7CL,EAASrC,GAAQ,CACb2C,QAASV,EAAeS,OACxB/B,MAAM,EACND,GAAIkC,iBAGRV,EAAkB,IAClBC,EAASU,QAAQC,UAIjB,UACI,cAACC,EAAD,CACIC,MAAOf,EACPgB,SAAU,gBAAGnE,EAAH,EAAGA,OAAH,OAAgBoD,EAAkBpD,EAAOkE,QACnDE,YAAY,wBACZC,UAAQ,EACRC,IAAKjB,IAET,cAACN,GAAD,gCCtCCwB,GAAgB1F,YAAO2F,IAAP3F,CAAH,oIAUb4F,GAAO5F,IAAO6F,GAAV,iHAOJC,GAAO9F,IAAO+F,GAAV,+NASX,qBAAGC,QAAuBpF,YAAJ,2DAKfqF,GAAUjG,IAAOkG,KAAV,sCACd,qBAAGlD,MAAmBpC,YAAJ,2EAKXsD,GAASlE,IAAOmE,OAAV,8IAOb,qBAAGgC,YAA+BvF,YAAJ,gMAS9B,qBAAGwF,QAAuBxF,YAAJ,gMCxDb,YCGFyF,GAAS,wEAAU,CAAEtD,GAAI,OAAbA,EAAH,EAAGA,GAAH,yBAAwCA,IC0C/CuD,GArCE,WACb,IAAMC,EAAWC,cACXC,EAAS,IAAIC,gBAAgBH,EAASI,QAASC,IAAIC,IAEnDtF,EAAQuF,aAAY,SAAApE,GAAK,ONoDD,SAACA,EAAO+D,GACtC,IAAMlF,EAAQkC,GAAYf,GAE1B,OAAK+D,GAA0B,KAAjBA,EAAM1B,OAIbxD,EAAMwF,QAAO,qBAAG/B,QAAsBgC,cAAcC,SAASR,EAAM1B,OAAOiC,kBAHtEzF,EMxDwB2F,CAAmBxE,EAAO+D,MACvDvE,EAAW4E,YAAYpD,IAEvBgB,EAAWC,cAEjB,OACI,cAACiB,GAAD,UACKrE,EAAM4F,KAAI,SAAA7E,GAAI,OACX,eAACwD,GAAD,CAEIE,OAAQ1D,EAAKU,MAAQd,EAFzB,UAII,cAAC,GAAD,CACIiE,YAAU,EACViB,QAAS,kBAAM1C,EAAS/B,GAAeL,EAAKS,MAFhD,SAIKT,EAAKU,KAAO,SAAM,KAEvB,cAACiD,GAAD,CAASjD,KAAMV,EAAKU,KAApB,SACI,cAAC0C,GAAD,CAAe2B,GAAIhB,GAAO,CAAEtD,GAAIT,EAAKS,KAArC,SAA6CT,EAAK0C,YAEtD,cAAC,GAAD,CACIoB,QAAM,EACNgB,QAAS,kBAAM1C,EAASzB,GAAWX,EAAKS,MAF5C,4BAZKT,EAAKS,UCnBjBzC,GAAUN,IAAOc,IAAV,8PAaPoD,GAASlE,IAAOmE,OAAV,yOAWb,qBAAGmD,UAA2B1G,YAAJ,uFCOjB2G,GA5BC,WACZ,IAAMC,EAAgBV,YAAYlD,IAC5B6D,EAAkBX,YAAYhD,IAC9B5B,EAAW4E,YAAYpD,IAEvBgB,EAAWC,cAEjB,OACI,cAAC,GAAD,WACM6C,GACE,qCACI,eAAC,GAAD,CACIJ,QAAS,kBAAM1C,EAASjC,OAD5B,UAGKP,EAAW,aAAU,QAH1B,qBAKA,cAAC,GAAD,CACIkF,QAAS,kBAAM1C,EAASvB,OACxBmE,SAAUG,EAFd,yCCDLC,GAfQ,WACnB,IAAMhD,EAAWC,cACXxC,EAAU2E,YAAYnD,IAE5B,OACI,cAAC,GAAD,UACI,cAAC,GAAD,CAAQ2D,SAAUnF,EAASiF,QAAS,kBAAM1C,EAAStB,OAAnD,SAEQjB,EAAU,oBAAiB,wCCXlC7B,GAAUN,IAAOc,IAAV,iFCIL,cACX,IAAM2F,ECLuB,SAAAkB,GAC7B,IAAMpB,EAAWC,cAEjB,OADqB,IAAIE,gBAAgBH,EAASI,QAC9BC,IAAIe,GDEVC,CAAkBf,IAC1BgB,ECA8B,WACpC,IAAMtB,EAAWC,cACXsB,EAAUC,cAEhB,OAAO,YAAqB,IAAlBJ,EAAiB,EAAjBA,IAAKtC,EAAY,EAAZA,MACL2C,EAAe,IAAItB,gBAAgBH,EAASI,aAEpCsB,IAAV5C,EACA2C,EAAaE,OAAOP,GAEpBK,EAAaG,IAAIR,EAAKtC,GAG1B,IAAM+C,EAAYJ,EAAaK,WAC/BP,EAAQtF,KAAR,UAAgB+D,EAAS+B,SAAzB,YAAqCF,KDdXG,GAS9B,OACI,cAAC,GAAD,UACI,cAACnD,EAAD,CACIG,YAAY,kBACZF,MAAOoB,GAAS,GAChBnB,SAZU,SAAC,GAAgB,IAAdnE,EAAa,EAAbA,OACrB0G,EAAsB,CAClBF,IAAKd,GACLxB,MAA+B,KAAxBlE,EAAOkE,MAAMN,OAAgB5D,EAAOkE,WAAQ4C,UEoBhDO,OAxBf,WACE,OACE,eAAC,EAAD,WACE,cAAC,EAAD,CAAQnI,MAAM,qBACd,cAAC,EAAD,CACEA,MAAM,qBACNW,KAAM,cAAC,GAAD,IACNC,mBAAoB,cAAC,GAAD,MAGtB,cAAC,EAAD,CACEZ,MAAM,eACNW,KAAM,cAACyH,GAAD,MAGR,cAAC,EAAD,CACEpI,MAAM,mBACNW,KAAM,cAAC,GAAD,IACNC,mBAAoB,cAAC,GAAD,UCAbyH,I,SAAAA,GAnBf,WACI,IAAQ3F,EAAO4F,cAAP5F,GACFT,EAAOwE,aAAY,SAAApE,GAAK,OdoDP,SAACA,EAAOE,GAAR,OAAmBa,GAAYf,GAAOkG,MAAK,qBAAG7F,KAAgBH,KcpDnDiG,CAAYnG,EAAOK,MAErD,OACI,eAAC,EAAD,WACI,cAAC,EAAD,CAAQ1C,MAAM,8BACd,cAAC,EAAD,CACIA,MAAOiC,EAAOA,EAAK0C,QAAU,yBAC7BhE,OAAQsB,GACJ,qCACI,qDADJ,IACiCA,EAAKU,KAAO,MAAQ,eChB5D0C,GAAgB1F,YAAO2F,IAAP3F,CAAH,2LAab4F,GAAO5F,IAAO6F,GAAV,+JASJC,GAAO9F,IAAO+F,GAAV,iDCrBF,cACX,OACI,8BACI,eAAC,GAAD,WACI,cAAC,GAAD,UACI,cAAC,GAAD,CAAesB,GXTN,WWST,uBAEJ,cAAC,GAAD,UACI,cAAC,GAAD,CAAeA,GXXL,SWWV,+BCJL,qBACX,eAAC,IAAD,WACI,cAACyB,GAAD,IAEA,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAM1C,KAAb,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAO0C,KZhBU,WYgBjB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAOA,KZlBW,SYkBlB,SACI,cAACC,EAAD,MAEJ,cAAC,IAAD,CAAOD,KAAK,IAAZ,SACI,cAAC,IAAD,CAAU1B,GZvBG,sBaYd4B,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,+CCPDQ,GAAe,yCAAG,6BAAAC,EAAA,sEACJC,MAAM,uCADF,cACrBC,EADqB,QAGbC,IACV,IAAIC,MAAMF,EAASG,YAJI,kBAOpBH,EAASI,QAPW,2CAAH,qD,aCKlBC,I,aAWAC,I,aAKOC,IAhBjB,SAAUF,KAAV,wEAEQ,OAFR,kBAEcG,aAAM,KAFpB,OAG6B,OAH7B,SAGmCC,aAAKZ,IAHxC,OAIQ,OADMa,EAHd,gBAIcC,aAAInH,GAAyBkH,IAJ3C,+BAMQ,OANR,oCAMcC,aAAIlH,MANlB,QAOQ,OAPR,UAOcgH,aAAKG,MAAO,gCAP1B,uDAWA,SAAUN,KAAV,wEACkB,OADlB,SACwBO,aAAOjH,IAD/B,OAEI,OADMlC,EADV,gBAEU+I,aAAKhJ,EAAyBC,GAFxC,wCAKO,SAAU6I,KAAV,kEACH,OADG,SACGO,aAAWvH,GAAkBwH,KAAMV,IADtC,OAEH,OAFG,SAEGW,aAAU,IAAKV,IAFlB,wC,iBClBkBW,IAAV,SAAUA,KAAV,kEACX,OADW,SACLC,aAAI,CACNX,OAFO,wCCEf,IAAMY,GAAiBC,eAEjBC,GAAQC,YAAe,CACzBC,QAAS,CACL7J,MAAO8J,IAEXC,WAAY,CAACN,MAGjBA,GAAeO,IAAIT,IAEJI,UCRfM,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,eAAC,IAAD,CAAUR,MAAOA,GAAjB,UACE,cAACrL,EAAD,IACA,cAAC8L,GAAD,SAGJC,SAASC,eAAe,SAM1B5C,O","file":"static/js/main.4c4d06ac.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n    box-sizing: border-box;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n    box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n    font-family: 'Montserrat', sans-serif;\r\n    background-color: #eee;\r\n    }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled.main`\r\n    max-width: 900px;\r\n    padding: 20px;\r\n    margin: 0 auto;\r\n`;","import { StyledContainer } from \"./styled\";\r\n\r\nconst Container = ({children}) => (\r\n    <StyledContainer>{children}</StyledContainer>\r\n);\r\n    \r\nexport default Container;","const Header = ({title}) => (\r\n    <header>\r\n        <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import styled, { css } from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n    background-color: #fff;\r\n    margin: 10px 0;\r\n    box-shadow: 0 0 5px #ddd;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    align-items: center;\r\n    border-bottom: 1px solid #ddd;\r\n\r\n    @media(max-width:767px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Heading = styled.h2`\r\n    font-size: 20px;\r\n    padding: 20px;\r\n    margin: 0;\r\n\r\n    ${({ special }) => special && css`\r\n        border-bottom: 1px solid #ddd;\r\n    `}\r\n`;\r\n\r\nexport const Body = styled.div`\r\n    padding: 20px;\r\n`;","import { Wrapper, Header, Heading, Body } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <Wrapper>\r\n        <Header>\r\n            <Heading>{title}</Heading>\r\n            {extraHeaderContent}\r\n        </Header>\r\n        <Body>{body}</Body>\r\n    </Wrapper>\r\n);\r\n\r\nexport default Section;","import React from \"react\";\r\nimport Container from \"../../common/Container\";\r\nimport Header from \"../../common/Header\";\r\nimport Section from \"../../common/Section\";\r\n\r\nexport default () => (\r\n    <Container>\r\n        <Header title=\"O autorze\" />\r\n        <Section\r\n            title=\"Cześć!\"\r\n            body={\r\n                <>Wejdź na mój LinkedIn i dowiedz się o mnie trochę więcej: <a href=\"https://www.linkedin.com/in/piotrekbrzegowy/\" target=\"_blank\">LinkedIn</a></>\r\n            }\r\n        />\r\n    </Container>\r\n);","import styled from \"styled-components\";\r\n\r\nexport default styled.input`\r\npadding: 10px;\r\nborder: 1px solid #ddd;\r\n`;\r\n","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = tasks =>\r\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () =>\r\n    JSON.parse(localStorage.getItem(localStorageKey)) || [];","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getTasksFromLocalStorage } from \"./tasksLocalStorage\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: {\r\n        tasks: getTasksFromLocalStorage(),\r\n        hideDone: false,\r\n        loading: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: task }) => {\r\n            tasks.push(task);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        removeTask: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks.splice(index, 1);\r\n        },\r\n        setAllDone: ({ tasks }) => {\r\n            for (const task of tasks) {\r\n                task.done = true;\r\n            }\r\n        },\r\n        fetchExampleTasks: state => {\r\n            state.loading = true;\r\n        },\r\n        fetchExampleTasksSuccess: (state, { payload: tasks }) => {\r\n            state.tasks = tasks;\r\n            state.loading = false;\r\n        },\r\n        fetchExampleTasksError: (state) => {\r\n            state.loading = false;\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    addTask,\r\n    toggleHideDone,\r\n    toggleTaskDone,\r\n    removeTask,\r\n    setAllDone,\r\n    fetchExampleTasks,\r\n    fetchExampleTasksSuccess,\r\n    fetchExampleTasksError,\r\n} = tasksSlice.actions;\r\n\r\nconst selectTasksState = state => state.tasks;\r\n\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectLoading = state => selectTasksState(state).loading;\r\nexport const selectAreTasksEmpty = state => selectTasks(state).length === 0;\r\nexport const selectIsEveryTaskDone = state => selectTasks(state).every(({ done }) => done);\r\n\r\nexport const getTaskById = (state, taskId) => selectTasks(state).find(({ id }) => id === taskId);\r\n\r\nexport const selectTasksByQuery = (state, query) => {\r\n    const tasks = selectTasks(state);\r\n\r\n    if (!query || query.trim() === \"\") {\r\n        return tasks;\r\n    }\r\n\r\n    return tasks.filter(({ content }) => content.toUpperCase().includes(query.trim().toUpperCase()));\r\n};\r\n\r\nexport default tasksSlice.reducer;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n\r\n    @media(max-width:767px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    padding: 10px;\r\n    cursor: pointer;\r\n    background-color: hsl(180, 100%, 25%);\r\n    color: white;\r\n    border: none;\r\n    transition: 0.5s;\r\n\r\n    &:hover {\r\n        background-color: hsl(180, 100%, 30%);\r\n        transform: scale(1.05);\r\n    }\r\n`;","import { nanoid } from \"@reduxjs/toolkit\";\r\nimport { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport Input from \"../../Input\";\r\nimport { addTask } from \"../../tasksSlice\";\r\nimport { StyledForm, Button } from \"./styled\";\r\n\r\nconst Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const trimmedNewTaskContent = newTaskContent.trim();\r\n\r\n        if (!trimmedNewTaskContent) {\r\n            return;\r\n        }\r\n\r\n        dispatch(addTask({\r\n            content: newTaskContent.trim(),\r\n            done: false,\r\n            id: nanoid(),\r\n        }));\r\n\r\n        setNewTaskContent(\"\");\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    return (\r\n        <StyledForm onSubmit={onFormSubmit}>\r\n            <Input\r\n                value={newTaskContent}\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                required\r\n                ref={inputRef}\r\n            />\r\n            <Button>Dodaj zadanie</Button>\r\n        </StyledForm>\r\n    );\r\n};\r\n\r\nexport default Form;","import { NavLink } from \"react-router-dom\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\nexport const StyledNavLink = styled(NavLink)`\r\n    color: teal;\r\n    text-decoration: none;\r\n\r\n    &:hover{\r\n        border-bottom: 1px solid;\r\n    }\r\n`;\r\n\r\n\r\nexport const List = styled.ul`\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n    word-break: break-word;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    color:white;\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 1px solid #ddd;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `} \r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    color: white;\r\n    width: 30px;\r\n    height: 30px;\r\n    padding: 0;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background-color: hsl(120, 61%, 34%);\r\n        transition: 0.5s;\r\n\r\n        &:hover {\r\n            background-color: hsl(120, 61%, 39%);\r\n        }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: hsl(348, 83%, 47%);\r\n        transition: 0.5s;\r\n\r\n        &:hover {\r\n            background-color: hsl(348, 83%, 52%);\r\n        }\r\n    `}\r\n`;","export default \"szukaj\";","export const toTasks = () => \"/zadania\";\r\nexport const toAuthor = () => \"/autor\";\r\n\r\nexport const toTask = ({ id } = { id: \":id\" }) => `/zadania/${id}`;","import { List, Item, Content, Button } from \"./styled\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { toggleTaskDone, removeTask, selectHideDone, selectTasksByQuery } from \"../../tasksSlice\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\nimport { toTask } from \"../../../../routes\";\r\nimport { StyledNavLink } from \"./styled\"\r\n\r\nconst TaskList = () => {\r\n    const location = useLocation();\r\n    const query = (new URLSearchParams(location.search)).get(searchQueryParamName);\r\n\r\n    const tasks = useSelector(state => selectTasksByQuery(state, query));\r\n    const hideDone = useSelector(selectHideDone);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <List>\r\n            {tasks.map(task => (\r\n                <Item\r\n                    key={task.id}\r\n                    hidden={task.done && hideDone}\r\n                >\r\n                    <Button\r\n                        toggleDone\r\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                    >\r\n                        {task.done ? \"✔\" : \"\"}\r\n                    </Button>\r\n                    <Content done={task.done}>\r\n                        <StyledNavLink to={toTask({ id: task.id })}>{task.content}</StyledNavLink>\r\n                    </Content>\r\n                    <Button\r\n                        remove\r\n                        onClick={() => dispatch(removeTask(task.id))}\r\n                    >\r\n                        🗑\r\n                    </Button>\r\n                </Item>\r\n            ))}\r\n        </List>\r\n    )\r\n};\r\n\r\nexport default TaskList;","import styled, { css } from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    margin: 0 20px 0 0;\r\n    display: flex;\r\n    justify-content: right;\r\n    gap: 20px;\r\n\r\n    @media(max-width:767px) {\r\n        display: grid;\r\n        grid-template-columns: 1fr;\r\n        margin: 0 20px 20px 20px;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    cursor: pointer;\r\n    background-color: transparent;\r\n    color: hsl(180, 100%, 25%);\r\n    transition: 0.5s;\r\n\r\n    &:hover {\r\n        color: hsl(180, 100%, 30%);\r\n    }\r\n\r\n    ${({ disabled }) => disabled && css`\r\n        color: #ccc;\r\n        cursor: not-allowed;\r\n    `}\r\n`;","import React from \"react\"\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectAreTasksEmpty, selectHideDone, selectIsEveryTaskDone, setAllDone, toggleHideDone } from \"../../tasksSlice\";\r\nimport { Wrapper, Button } from \"./styled\";\r\n\r\nconst Buttons = () => {\r\n    const areTasksEmpty = useSelector(selectAreTasksEmpty);\r\n    const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n    const hideDone = useSelector(selectHideDone);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <Wrapper>\r\n            {!areTasksEmpty && (\r\n                <>\r\n                    <Button\r\n                        onClick={() => dispatch(toggleHideDone())}\r\n                    >\r\n                        {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => dispatch(setAllDone())}\r\n                        disabled={isEveryTaskDone}\r\n                    >\r\n                        Ukończ wszystkie\r\n                    </Button>\r\n                </>\r\n            )}\r\n        </Wrapper>\r\n    )\r\n};\r\n\r\nexport default Buttons;","import React from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchExampleTasks, selectLoading } from \"../../tasksSlice\";\r\nimport { Wrapper, Button } from \"../Buttons/styled\";\r\n\r\nconst DownloadButton = () => {\r\n    const dispatch = useDispatch();\r\n    const loading = useSelector(selectLoading);\r\n\r\n    return (\r\n        <Wrapper>\r\n            <Button disabled={loading} onClick={() => dispatch(fetchExampleTasks())}>\r\n                {\r\n                    loading ? \"Ładowanie...\" : \"Pobierz przykładowe zadania\"\r\n                }\r\n            </Button>\r\n        </Wrapper>\r\n    )\r\n};\r\n\r\nexport default DownloadButton;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n`;","import React from \"react\";\r\nimport Input from \"../../Input\";\r\nimport { useQueryParameter, useReplaceQueryParameter } from \"../queryParameters\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\nimport { Wrapper } from \"./styled\";\r\n\r\nexport default () => {\r\n    const query = useQueryParameter(searchQueryParamName);\r\n    const replaceQueryParameter = useReplaceQueryParameter();\r\n\r\n    const onInputChange = ({ target }) => {\r\n        replaceQueryParameter({\r\n            key: searchQueryParamName,\r\n            value: target.value.trim() !== \"\" ? target.value : undefined,\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Wrapper>\r\n            <Input\r\n                placeholder=\"Filtruj zadania\"\r\n                value={query || \"\"}\r\n                onChange={onInputChange}\r\n            />\r\n        </Wrapper>\r\n    );\r\n};","import { useHistory, useLocation } from \"react-router\";\r\n\r\nexport const useQueryParameter = key => {\r\n    const location = useLocation();\r\n    const searchParams = new URLSearchParams(location.search);\r\n    return searchParams.get(key);\r\n}\r\n\r\nexport const useReplaceQueryParameter = () => {\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n\r\n    return ({ key, value }) => {\r\n        const searchParams = new URLSearchParams(location.search);\r\n\r\n        if (value === undefined) {\r\n            searchParams.delete(key);\r\n        } else {\r\n            searchParams.set(key, value);\r\n        }\r\n\r\n        const newSearch = searchParams.toString();\r\n        history.push(`${location.pathname}?${newSearch}`)\r\n    }\r\n}","import Form from \"./Form\";\r\nimport TaskList from \"./TaskList\";\r\nimport Buttons from \"./Buttons\";\r\nimport Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\nimport Container from \"../../../common/Container\";\r\nimport DownloadButton from \"./Button\";\r\nimport Search from \"./Search\";\r\n\r\nfunction TasksPage() {\r\n  return (\r\n    <Container>\r\n      <Header title=\"Lista zadań\" />\r\n      <Section\r\n        title=\"Dodaj nowe zadanie\"\r\n        body={<Form />}\r\n        extraHeaderContent={<DownloadButton />}\r\n      />\r\n\r\n      <Section\r\n        title=\"Wyszukiwarka\"\r\n        body={<Search />}\r\n      />\r\n\r\n      <Section\r\n        title=\"Lista zadań\"\r\n        body={<TaskList />}\r\n        extraHeaderContent={<Buttons />}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default TasksPage;\r\n","import React from \"react\";\r\nimport Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\nimport Container from \"../../../common/Container\";\r\nimport { useParams } from \"react-router\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getTaskById } from \"../tasksSlice\";\r\n\r\nfunction TaskPage() {\r\n    const { id } = useParams();\r\n    const task = useSelector(state => getTaskById(state, id));\r\n\r\n    return (\r\n        <Container>\r\n            <Header title=\"Szczegóły zadania\" />\r\n            <Section\r\n                title={task ? task.content : \"Nie znaleziono zadania\"}\r\n                body={!!task && (\r\n                    <>\r\n                        <strong>Ukończono:</strong> {task.done ? \"Tak\" : \"Nie\"}\r\n                    </>\r\n                )}\r\n            />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default TaskPage;\r\n\r\n","import styled from \"styled-components\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport const StyledNavLink = styled(NavLink)`\r\n    color: white;\r\n    text-decoration: none;\r\n\r\n    &.active{\r\n        font-weight: bold;\r\n    }\r\n\r\n    &:hover{\r\n        border-bottom: 1px solid;\r\n    }\r\n`;\r\n\r\nexport const List = styled.ul`\r\n    background: teal;\r\n    margin: 0;\r\n    padding: 0;\r\n    display: flex;\r\n    justify-content: center;\r\n    list-style: none;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    margin: 20px;\r\n`;","import React from \"react\";\r\nimport { toAuthor, toTasks } from \"../routes\";\r\nimport { List, Item, StyledNavLink } from \"./styled\";\r\n\r\nexport default () => {\r\n    return (\r\n        <nav>\r\n            <List>\r\n                <Item>\r\n                    <StyledNavLink to={toTasks()}>Zadania</StyledNavLink>\r\n                </Item>\r\n                <Item>\r\n                    <StyledNavLink to={toAuthor()}>O autorze</StyledNavLink>\r\n                </Item>\r\n            </List>\r\n        </nav>\r\n    );\r\n};","import React from \"react\";\r\nimport { HashRouter, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport AuthorPage from \"./features/author/AuthorPage\";\r\nimport TasksPage from \"./features/tasks/TasksPage/index\";\r\nimport TaskPage from \"./features/tasks/TaskPage/index\";\r\nimport { toTask, toTasks, toAuthor } from \"./routes\";\r\nimport Navigation from \"./Navigation\";\r\n\r\nexport default () => (\r\n    <HashRouter>\r\n        <Navigation />\r\n\r\n        <Switch>\r\n            <Route path={toTask()}>\r\n                <TaskPage />\r\n            </Route>\r\n            <Route path={toTasks()}>\r\n                <TasksPage />\r\n            </Route>\r\n            <Route path={toAuthor()}>\r\n                <AuthorPage />\r\n            </Route>\r\n            <Route path=\"/\">\r\n                <Redirect to={toTasks()}></Redirect>\r\n            </Route>\r\n        </Switch>\r\n    </HashRouter>\r\n);\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"/todos-list-react/exampleTasks.json\");\r\n\r\n    if (!response.ok) {\r\n        new Error(response.statusText)\r\n    }\r\n\r\n    return response.json();\r\n};","import { takeLatest, takeEvery, call, put, select, delay } from \"redux-saga/effects\"\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\r\nimport { fetchExampleTasks, fetchExampleTasksError, fetchExampleTasksSuccess, selectTasks } from \"./tasksSlice\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        yield delay(1000);\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(fetchExampleTasksSuccess(exampleTasks));\r\n    } catch (error) {\r\n        yield put(fetchExampleTasksError());\r\n        yield call(alert, \"Coś poszło nie tak\");\r\n    }\r\n}\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks);\r\n    yield call(saveTasksInLocalStorage, tasks);\r\n}\r\n\r\nexport function* tasksSaga() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n}","import { all } from \"redux-saga/effects\";\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\";\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        tasksSaga(),\r\n    ]);\r\n};","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport rootSaga from \"./rootSaga\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { GlobalStyle } from './GlobalStyle';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from \"./store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <GlobalStyle />\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}