{"version":3,"sources":["GlobalStyle.js","features/tasks/tasksSlice.js","features/tasks/Form/styled.js","features/tasks/Form/index.js","features/tasks/TaskList/styled.js","features/tasks/TaskList/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/Tasks.js","App.js","reportWebVitals.js","store.js","index.js"],"names":["GlobalStyle","createGlobalStyle","tasksSlice","createSlice","name","initialState","tasks","hideDone","reducers","addTask","task","payload","push","toggleHideDone","state","toggleTaskDone","taskId","index","findIndex","id","done","removeTask","splice","setAllDone","actions","selectTasksState","selectTasks","selectHideDone","selectAreTasksEmpty","length","selectIsEveryTaskDone","every","StyledForm","styled","form","Input","input","Button","button","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trim","content","nanoid","current","focus","value","onChange","target","placeholder","required","ref","List","ul","Item","li","hidden","css","Content","span","toggleDone","remove","TaskList","useSelector","map","onClick","Wrapper","div","disabled","Buttons","areTasksEmpty","isEveryTaskDone","section","Header","header","Heading","h2","special","Body","Section","title","body","extraHeaderContent","StyledContainer","main","Container","children","Tasks","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","tasksReducer","ReactDOM","render","StrictMode","store","App","document","getElementById"],"mappings":"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","file":"static/js/main.ef766a04.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n    box-sizing: border-box;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n    box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n    font-family: 'Montserrat', sans-serif;\r\n    background-color: #eee;\r\n    }\r\n`;","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: {\r\n        tasks: [],\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: task }) => {\r\n            tasks.push(task);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        removeTask: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks.splice(index, 1);\r\n        },\r\n        setAllDone: ({ tasks }) => {\r\n            for (const task of tasks) {\r\n                task.done = true;\r\n            }\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    addTask,\r\n    toggleHideDone,\r\n    toggleTaskDone,\r\n    removeTask,\r\n    setAllDone,\r\n} = tasksSlice.actions;\r\n\r\nconst selectTasksState = state => state.tasks;\r\n\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectAreTasksEmpty = state => selectTasks(state).length === 0;\r\nexport const selectIsEveryTaskDone = state => selectTasks(state).every(({ done }) => done);\r\n\r\nexport default tasksSlice.reducer;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n\r\n    @media(max-width:767px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    padding: 10px;\r\n    border: 1px solid #ddd;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    padding: 10px;\r\n    cursor: pointer;\r\n    background-color: hsl(180, 100%, 25%);\r\n    color: white;\r\n    border: none;\r\n    transition: 0.5s;\r\n\r\n    &:hover {\r\n        background-color: hsl(180, 100%, 30%);\r\n        transform: scale(1.05);\r\n    }\r\n`;","import { nanoid } from \"@reduxjs/toolkit\";\r\nimport { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTask } from \"../tasksSlice\";\r\nimport { StyledForm, Input, Button } from \"./styled\";\r\n\r\nconst Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const trimmedNewTaskContent = newTaskContent.trim();\r\n\r\n        if (!trimmedNewTaskContent) {\r\n            return;\r\n        }\r\n\r\n        dispatch(addTask({\r\n            content: newTaskContent.trim(),\r\n            done: false,\r\n            id: nanoid(),\r\n        }));\r\n\r\n        setNewTaskContent(\"\");\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    return (\r\n        <StyledForm onSubmit={onFormSubmit}>\r\n            <Input\r\n                value={newTaskContent}\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                required\r\n                ref={inputRef}\r\n            />\r\n            <Button>Dodaj zadanie</Button>\r\n        </StyledForm>\r\n    );\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n    word-break: break-word;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 1px solid #ddd;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `} \r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    color: white;\r\n    width: 30px;\r\n    height: 30px;\r\n    padding: 0;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background-color: hsl(120, 61%, 34%);\r\n        transition: 0.5s;\r\n\r\n        &:hover {\r\n            background-color: hsl(120, 61%, 39%);\r\n        }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: hsl(348, 83%, 47%);\r\n        transition: 0.5s;\r\n\r\n        &:hover {\r\n            background-color: hsl(348, 83%, 52%);\r\n        }\r\n    `}\r\n`;","import { List, Item, Content, Button } from \"./styled\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleTaskDone, removeTask, selectHideDone } from \"../tasksSlice\";\r\n\r\nconst TaskList = () => {\r\n    const tasks = useSelector(selectTasks);\r\n    const hideDone = useSelector(selectHideDone);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <List>\r\n            {tasks.map(task => (\r\n                <Item\r\n                    key={task.id}\r\n                    hidden={task.done && hideDone}\r\n                >\r\n                    <Button\r\n                        toggleDone\r\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                    >\r\n                        {task.done ? \"✔\" : \"\"}\r\n                    </Button>\r\n                    <Content done={task.done}>\r\n                        {task.content}\r\n                    </Content>\r\n                    <Button\r\n                        remove\r\n                        onClick={() => dispatch(removeTask(task.id))}\r\n                    >\r\n                        🗑\r\n                    </Button>\r\n                </Item>\r\n            ))}\r\n        </List>\r\n    )\r\n};\r\n\r\nexport default TaskList;","import styled, { css } from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    margin: 0 20px 0 0;\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    grid-gap: 20px;\r\n\r\n    @media(max-width:767px) {\r\n        grid-template-columns: 1fr;\r\n        margin: 0 20px 20px 20px;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    cursor: pointer;\r\n    background-color: transparent;\r\n    color: hsl(180, 100%, 25%);\r\n    transition: 0.5s;\r\n\r\n    &:hover {\r\n        color: hsl(180, 100%, 30%);\r\n    }\r\n\r\n    ${({ disabled }) => disabled && css`\r\n        color: #ccc;\r\n        cursor: not-allowed;\r\n    `}\r\n`;","import React from \"react\"\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectAreTasksEmpty, selectHideDone, selectIsEveryTaskDone, setAllDone, toggleHideDone } from \"../tasksSlice\";\r\nimport { Wrapper, Button } from \"./styled\";\r\n\r\nconst Buttons = () => {\r\n    const areTasksEmpty = useSelector(selectAreTasksEmpty);\r\n    const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n    const hideDone = useSelector(selectHideDone);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <Wrapper>\r\n            {!areTasksEmpty && (\r\n                <>\r\n                    <Button\r\n                        onClick={() => dispatch(toggleHideDone())}\r\n                    >\r\n                        {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => dispatch(setAllDone())}\r\n                        disabled={isEveryTaskDone}\r\n                    >\r\n                        Ukończ wszystkie\r\n                    </Button>\r\n                </>\r\n            )}\r\n        </Wrapper>\r\n    )\r\n};\r\n\r\nexport default Buttons;","import styled, { css } from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n    background-color: #fff;\r\n    margin: 10px 0;\r\n    box-shadow: 0 0 5px #ddd;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    align-items: center;\r\n    border-bottom: 1px solid #ddd;\r\n\r\n    @media(max-width:767px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Heading = styled.h2`\r\n    font-size: 20px;\r\n    padding: 20px;\r\n    margin: 0;\r\n\r\n    ${({ special }) => special && css`\r\n        border-bottom: 1px solid #ddd;\r\n    `}\r\n`;\r\n\r\nexport const Body = styled.div`\r\n    padding: 20px;\r\n`;","import { Wrapper, Header, Heading, Body } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <Wrapper>\r\n        <Header>\r\n            <Heading>{title}</Heading>\r\n            {extraHeaderContent}\r\n        </Header>\r\n        <Body>{body}</Body>\r\n    </Wrapper>\r\n);\r\n\r\nexport default Section;","const Header = ({title}) => (\r\n    <header>\r\n        <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled.main`\r\n    max-width: 900px;\r\n    padding: 20px;\r\n    margin: 0 auto;\r\n`;","import { StyledContainer } from \"./styled\";\r\n\r\nconst Container = ({children}) => (\r\n    <StyledContainer>{children}</StyledContainer>\r\n);\r\n    \r\nexport default Container;","import Form from \"./Form\";\r\nimport TaskList from \"./TaskList\";\r\nimport Buttons from \"./Buttons\";\r\nimport Section from \"../../common/Section\";\r\nimport Header from \"../../common/Header\";\r\nimport Container from \"../../common/Container\";\r\n\r\nfunction Tasks() {\r\n  return (\r\n    <Container>\r\n      <Header title=\"Lista zadań\" />\r\n      <Section\r\n        title=\"Dodaj nowe zadanie\"\r\n        body={<Form />}\r\n      />\r\n\r\n      <Section\r\n        title=\"Lista zadań\"\r\n        body={<TaskList />}\r\n        extraHeaderContent={<Buttons />}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Tasks;\r\n","import React from \"react\";\r\nimport Tasks from \"./features/tasks/Tasks\";\r\n\r\nexport default () => <Tasks />;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { GlobalStyle } from './GlobalStyle';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from \"./store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <GlobalStyle />\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}